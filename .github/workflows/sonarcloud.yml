# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  coverage:    
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 10.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./**/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Tree
        run: tree
      - name: Cat
        run: cat code-coverage-results.md
          
          # - name: Add Coverage PR Comment
          # uses: marocchino/sticky-pull-request-comment@v2
          # with:
        # recreate: true
        # path: code-coverage-results.md
      - name: Add a comment to the PR
        uses: Libra-foundation/Pull-Request-Comments@V1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: code-coverage-results.md
  
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Sonar recommends full history for PR decoration

#      - name: Setup .NET
#        uses: actions/setup-dotnet@v4
#        with:
#          dotnet-version: |
#            8.0.x
#            7.0.x
#            10.0.x
#      #
#      - name: Restore
#        run: dotnet restore
#
#      - name: Build
#        run: dotnet build --no-restore -c Release
#
#      - name: Test (collect coverage + trx)
#        run: |
#          # Run all tests, emit OpenCover XML and TRX results per project
#          dotnet test --no-build -c Release \
#            /p:CollectCoverage=true \
#            /p:CoverletOutputFormat=opencover \
#            /p:CoverletOutput=./TestResults/coverage.opencover.xml \
#            --logger "trx;LogFileName=TestResults.trx"
#
#      - name: Code Coverage Report
#        uses: irongut/CodeCoverageSummary@v1.3.0
#        with:
#          filename: ./TestResults/**/coverage.opencover.xml
#          badge: true
#          fail_below_min: false
#          format: markdown
#          hide_branch_rate: false
#          hide_complexity: false
#          indicators: true
#          output: both
#          thresholds: '60 80'
#      
#      - name: Add a comment to the PR
#        uses: Libra-foundation/Pull-Request-Comments@V1.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          filename: code-coverage-results.md

      # OPTIONAL: keep artifacts for inspection
      #      - name: Upload Test Results
      #        if: always()
      #        uses: actions/upload-artifact@v4
      #        with:
      #          retention-days: 7
      #          name: test-results
      #          path: |
      #            **/TestResults/*.trx
      #            **/TestResults/coverage.opencover.xml


      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.ORGALIZATION_KEY }}
            -Dsonar.cs.vstest.reportsPaths=**/TestResults/*.trx
            -Dsonar.cs.opencover.reportsPaths=**/TestResults/coverage.opencover.xml
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
          # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
          #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .

