name: SonarCloud (.NET + coverage)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Begin Sonar analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ secrets.PROJECT_KEY }}" \
            /o:"${{ secrets.ORGANIZATION_KEY }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore -c Release

      - name: Test (coverlet -> OpenCover + TRX)
        run: |
          dotnet test --no-build -c Release \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=./TestResults/coverage.opencover.xml \
            --logger "trx;LogFileName=TestResults.trx"

      # Optional: sanity check the files Sonar will read
      - name: Show coverage files
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -R **/TestResults || true

      - name: End Sonar analysis
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end
